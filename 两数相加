给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。
你可以假设除了数字 0 之外，这两个数字都不会以零开头。
示例：
输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

此题有毒啊,审题千万要仔细,我按照两个数相加的套路来处理,算完之后跑用例发现全都溢出;先给出我的错误解答:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int flag = 0;
        long long count = 0;
        while(true){
            if(l1->next != NULL){
            count = count + l1->val*pow(10,flag++);
            l1 = l1 -> next;
            }else{
                count = count + l1->val*pow(10,flag++);
                break;
            }
        }
        flag = 0;
        while(true){
            if(l2->next != NULL){
            count = count + l2->val*pow(10,flag++);
            l2 = l2 -> next;
            }else{
                count = count + l2->val*pow(10,flag++);
                break;
            }
        }
        ListNode list(0);
        ListNode* temp = &list;
        if(count == 0){
            ListNode* next_node = new ListNode(count);
            list.next = next_node;
        }
        while(count!=0){
            int num = count % 10;
            count = count/10;
            ListNode* next_node = new ListNode(num);
            temp->next = next_node;
            temp = next_node;
        }
        return list.next;
    }
};
ps:
1)CSDN简直有毒,各种账户问题,再在CSDN上写博是狗;
2)链表和C++掌握不好,导致简单问题卡了半天,是时候复习一把了;
3)仔细审题,C++要千万注意溢出的问题,还有指针和空间的问题;
end;
