问题描述:
给定一个字符串，找出不含有重复字符的最长子串的长度。
示例 1:

输入: "abcabcbb"
输出: 3 
解释: 无重复字符的最长子串是 "abc"，其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 无重复字符的最长子串是 "b"，其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 无重复字符的最长子串是 "wke"，其长度为 3。
     请注意，答案必须是一个子串，"pwke" 是一个子序列 而不是子串。
解答思路:先遍历字符串,求出每个字符下一次出现的位置,形成一个数组;首指针指出最多可能出现的字符串长度,第二指针在该范围内遍历看是否有更小的长度存在,直到最小;
时间复杂度:O(n^2)
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int temp = s.length();
        if(temp == 0){
            return 0;
        }
        int position[temp];
        for(int i= 0; i<temp; i++){
            for(int j = i+1;j<=temp ; j++){
                if(s[i] == s[j]||j==temp){
                    position[i] = j;
                    break;
                }
            }
        }
        for(int i= 0; i<temp; i++){
            cout<<position[i]<<endl;
        }
         int MAX_STR_SIZE = 1;
         for(int i = 0;i < temp-1; i++){
             int temp_str_size = position[i] - i ; 
             int num = position[i];
             int circle_flag = num = position[i];//circle_flag标定循环的位置,num标定辐射范围
             //int circle_flag = position[i];
             for(int j = i+1; j < circle_flag; j++){
                 if(position[j] <= num){
                     temp_str_size = position[j] - i;
                     circle_flag = position[j];
                     num = position[j]; 
                     //cout<<num<<endl;
                 }else{
                     continue;
                 }

             }
             if(temp_str_size > MAX_STR_SIZE){
                MAX_STR_SIZE = temp_str_size;
            }
         }
            return MAX_STR_SIZE;
            

    }
};
ps:
1)代码垃圾的一批
2)需要充分利用ide进行调试,自己瞎看看不出来
